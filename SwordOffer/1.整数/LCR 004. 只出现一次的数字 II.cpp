#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

/************************************************
 * 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。

示例 1：
输入：nums = [2,2,3,2]
输出：3

示例 2：
输入：nums = [0,1,0,1,0,1,100]
输出：100

提示：
1 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次
 */

/************************************************
 * 1、审题：
 * - 输入一个整数数组，数组中只有一个元素数字出现一次，其他元素都出现三次，找出这个只出现一次的元素
 * 2、解题：二进制位数相加除于3，求得到的余数
 * - 整数的数据类型长度为4个字节，也就是4*8=32位，使用一个32位的数组保存所有数组元素中的二进制位置的位数
 * - 因为有的元素会出现三次，所有二进制位为1的数，相加后肯定可以被3整除，如果有剩余，余数为1的话，那就是那个单独出现一次的元素
 * - 两层遍历，外层遍历拿到整数数组的每个元素，内存for循环，遍历32次，求单个元素在该位置上的位数，并保存到数组中，通过位移（右移位）不断获取元素的位数
 * - 最终得到的32位的数组，就是数组所有元素的二进制位数相加的值，将该值继续遍历，除于3，得到的余数就是只出现一次元素的二进制位数
 * - 将二进制位数，转换成十进制返回
 */
int singleNumber(vector<int> &nums)
{
    int bits[32] = {0};
    int res = 0;

    for (int i = 0; i < nums.size(); i++)
    {
        int num = nums[i];
        for (int j = 0; j < 32; j++)
        {
            bits[32 - j - 1] += (num >> j) & 1;
        }
    }
    for (int bit : bits)
    {
        std::cout << bit << ",";
    }
    std::cout << std::endl;

    // 将这些位数除于3，获取他的余数
    for (int i = 0; i < 32; i++)
    {
        int bitNum = bits[32 - i - 1] % 3 * (1 << i);
        res += bitNum;
    }

    return res;
}

/************************************************
 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

示例 1 ：
输入：nums = [2,2,1]
输出：1

示例 2 ：
输入：nums = [4,1,2,1,2]
输出：4

示例 3 ：
输入：nums = [1]
输出：1


提示：
1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
除了某个元素只出现一次以外，其余每个元素均出现两次。
 */

/************************************************
 * 1、审题：
 * - 输入一个整数数组，其中一个元素出现了一次，其他元素都出现了两次，求这个只出现一次的元素
 * 2、解题：异或位运算
 * - 一个数字异或^自己，最终结果为0.
 * - 将数组中所有元素进行异或操作，出现两次的元素进行异或操作结果为0，最终与出现一次的元素进行异或操作最终结果为出现一次的元素
 */
int singleNumber1(vector<int> &nums)
{
    int res = nums[0];
    for (int i = 1; i < nums.size(); i++)
    {
        res ^= nums[i];
    }
    return res;
}

int main()
{
    std::cout << "Hello, Algorithm!" << std::endl;
    vector<int> nums = {0, 1, 0, 1, 0, 1, 100};
    auto res = singleNumber(nums);

    std::cout << "res:" << res << std::endl;

    // 遍历res
    // for (int element : res)
    // {
    //     std::cout << element << ",";
    // }
    // std::cout << std::endl;

    return 0;
}